<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<configuration status="WARN" monitorInterval="600">
    <properties>
        #配置日志文件目录(相对目录或者绝对目录)
        <property name="LOG_HOME">D:/data/logs/test_project</property>
        #配置日志文件名称
        <property name="FILE_NAME">test_project</property>
        <property name="EXCEPTION">exception</property>
        <property name="SINGLE_SIZE">50MB</property>
    </properties>
    <!-- 自定义日志级别 -->
    <!--先定义所有的appender -->
    <appenders>
        <!--这个输出控制台的配置 -->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式 -->
            <PatternLayout pattern="%d{yyyyMMdd HHmmss.SSS} pid:${FILE_NAME} thread:%t %level [%c{1}] %msg%n" />
        </console>
        <console name="ConsoleException" target="SYSTEM_OUT">
            <!--把异常打印的堆栈信息输出到一行-->
            <PatternLayout pattern="%d{yyyyMMdd HHmmss.SSS} pid:${FILE_NAME} thread:%t %level [%c{1}] %msg{nolookups}%xThrowable{separator(|)}%n" />
        </console>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
        <!-- <File name="log" fileName="log/test.log" append="false"> -->
        <!-- <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M
            - %msg%xEx%n"/> -->
        <!-- </File> -->
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="RollingFileInfo"
                     fileName="${LOG_HOME}/${FILE_NAME}.log"
                     filePattern="${LOG_HOME}/${FILE_NAME}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="%d{yyyyMMdd HHmmss.SSS} pid:${FILE_NAME} thread:%t %level [%c{1}] %msg%n" />
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="24"/>
                <SizeBasedTriggeringPolicy size="${SINGLE_SIZE}" />
            </Policies>
        </RollingFile>
        <RollingFile name="ExceptionLogFile"
                     fileName="${LOG_HOME}/${EXCEPTION}.log"
                     filePattern="${LOG_HOME}/${EXCEPTION}-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyyMMdd HHmmss.SSS} pid:${FILE_NAME} thread:%t %level [%c{1}] %msg%n" />
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="24"/>
                <SizeBasedTriggeringPolicy size="${SINGLE_SIZE}" />
            </Policies>
        </RollingFile>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>
        <!--过滤掉spring的一些无用的DEBUG信息 -->
        <!--<logger name="org.springframework" level="info"></logger>-->
        <logger name="test" level="debug" additivity="false">
            <appender-ref ref="Console" />
            <appender-ref ref="RollingFileInfo" />
            <appender-ref ref="ExceptionLogFile" />
        </logger>
        <logger name="test.java.lang.ExceptionTest" level="warn" additivity="false">
            <appender-ref ref="ConsoleException" />
            <appender-ref ref="ExceptionLogFile" />
        </logger>
        <root level="info">
            <appender-ref ref="Console" />
            <appender-ref ref="RollingFileInfo" />
            <appender-ref ref="ExceptionLogFile" />
        </root>
    </loggers>
</configuration>