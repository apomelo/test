package test.algorithm.leetcode;

import lombok.extern.slf4j.Slf4j;

/**
 * 数独
 * @author C
 * @date 2023/4/4
 */
@Slf4j
public class AlgoSudoku {
    public static void main(String[] args) {
        // 有效的数独
        log.info("ValidSudoku: {}", new ValidSudoku().isValidSudoku(ValidSudoku.example1()));
        // 解数独
        char[][] sudokuSolverExample1 = SudokuSolver.example1();
        new SudokuSolver().solveSudoku(sudokuSolverExample1);
        SudokuSolver.printSudoku(sudokuSolverExample1);
    }
}


/**
 * @lc app=leetcode.cn id=36 lang=java
 *
 * [36] 有效的数独
 *
 * https://leetcode.cn/problems/valid-sudoku/description/
 *
 * algorithms
 * Medium (63.21%)
 * Likes:    1076
 * Dislikes: 0
 * Total Accepted:    363.7K
 * Total Submissions: 576.3K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 *
 * 注意：
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用 '.' 表示。
 *
 * 示例 1：
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 *
 * 示例 2：
 * 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在,
 * 因此这个数独是无效的。
 *
 * 提示：
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字（1-9）或者 '.'
 */
class ValidSudoku {
    public boolean isValidSudoku(char[][] board) {
        // 定义数字行内出现的次数
        int[][] rows = new int[9][9];
        // 定义数字列内出现的次数
        int[][] columns = new int[9][9];
        // 定义数字九宫格内出现的次数, 最多 9 个数字
        int[][][] subboxes = new int[3][3][9];
        // 遍历数组
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char c = board[i][j];
                // 只要存在数字
                if (c != '.') {
                    // 把数字减 '1' 化成索引下标
                    int index = c - '1';
                    // 这个时候++意思是第i行这个 c 值次数 +1, 默认row第二位就是 {1-9}-1; 每一行都有可能是 1-9
                    // 例如现在是第一行第一列是 9, 就在 row[1][8] 号位置 +1
                    rows[i][index]++;
                    // 列同理
                    columns[j][index]++;
                    // 并且九宫格内次数也要 +1, 例如也是第1行第一列, i/3 j/3 会自动定位到所在的小宫格
                    subboxes[i / 3][j / 3][index]++;
                    if (rows[i][index] > 1 || columns[j][index] > 1 || subboxes[i / 3][j / 3][index] > 1) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public static char[][] example1() {
        return new char[][] {
                {'8','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };
    }
}


/**
 * @lc app=leetcode.cn id=37 lang=java
 *
 * [37] 解数独
 *
 * https://leetcode.cn/problems/sudoku-solver/description/
 *
 * algorithms
 * Hard (67.63%)
 * Likes:    1590
 * Dislikes: 0
 * Total Accepted:    197.9K
 * Total Submissions: 292.7K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 编写一个程序，通过填充空格来解决数独问题。
 * 数独的解法需 遵循如下规则：
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1：
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：
 * [["5","3","4","6","7","8","9","1","2"]
 * ,["6","7","2","1","9","5","3","4","8"]
 * ,["1","9","8","3","4","2","5","6","7"]
 * ,["8","5","9","7","6","1","4","2","3"]
 * ,["4","2","6","8","5","3","7","9","1"]
 * ,["7","1","3","9","2","4","8","5","6"]
 * ,["9","6","1","5","3","7","2","8","4"]
 * ,["2","8","7","4","1","9","6","3","5"]
 * ,["3","4","5","2","8","6","1","7","9"]]
 * 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
 *
 * 提示：
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 * 题目数据 保证 输入数独仅有一个解
 */
class SudokuSolver {
    public void solveSudoku(char[][] board) {
        dfs(board, 0, 0);
    }

    private boolean dfs(char[][] sd, int i, int j) {
        if (j == 9) {
            j = 0;
            i ++;
        }
        if (i == 9) {
            return true;
        }
        if (sd[i][j] == '.') {
            for (int k = 1; k <= 9; k ++) {
                char val = (char) ('0' + k);
                // check 后满足
                if (check(sd, i, j, val)) {
                    sd[i][j] = val;
                    // 已经找到答案了, 直接 return
                    if (dfs(sd, i, j + 1)) {
                        return true;
                    }
                    // 没找到答案, 回溯
                    sd[i][j] = '.';
                }
            }
            return false;
        } else {
            return dfs(sd, i, j + 1);
        }
    }

    // 判断 sd[i][j] 是否可以填入 val
    private boolean check(char[][] sd, int i, int j, char val) {
        for (int k = 0; k < 9; k++) {
            // 判断行是否存在重复
            if (sd[i][k] == val) return false;
            // 判断列是否存在重复
            if (sd[k][j] == val) return false;
            // 判断 3 x 3 方框是否存在重复
            if (sd[(i / 3) * 3 + k / 3][(j / 3) * 3 + k % 3] == val)
                return false;
        }
        return true;
    }

    private boolean check2(char[][] sd, int i, int j, char val) {
        // 验证同行
        for (int k = 0; k < 9; k ++) {
            if (sd[i][k] == val) {
                return false;
            }
        }
        // 验证同列
        for (int k = 0; k < 9; k ++) {
            if (sd[k][j] == val) {
                return false;
            }
        }

        // 验证同小九宫格
        // 九宫格行的起点
        int rowLimit = i / 3 * 3;
        // 九宫格列的起点
        int colLimit = j / 3 * 3;
        for (int k = rowLimit; k < rowLimit + 3; k ++) {
            for (int l = colLimit; l < colLimit + 3; l ++) {
                if (sd[k][l] == val) {
                    return false;
                }
            }
        }
        return true;
    }

    public static char[][] example1() {
        return new char[][] {
                {'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };
    }

    public static void printSudoku(char[][] sd) {
        System.out.println("------begin------");
        // 打印数独
        for (int i = 0; i < 9; i ++) {
            for (int j = 0; j < 9; j ++) {
                System.out.print(sd[i][j]);
                System.out.print(" ");
            }
            System.out.println();
        }
        System.out.println("-------end-------");
    }
}
